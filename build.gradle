plugins {
    id 'jacoco'
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

ext.JUNIT_VERSION = '5.3.2'
ext.TRUTH_VERSION = '0.42'


dependencies {
  compile 'org.xerial:sqlite-jdbc:3.7.2'
  compile 'org.slf4j:slf4j-simple:1.8.0-beta4'
  compile files('myutils.jar')
  compile 'org.json:json:20180813'
  
  testImplementation 'com.thedeanda:lorem:2.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:'+JUNIT_VERSION
  
  // testImplementation 'org.junit.jupiter:junit-jupiter-params:'+JUNIT_VERSION
   testRuntime 'org.junit.jupiter:junit-jupiter-engine:'+JUNIT_VERSION
   
  // testImplementation 'com.google.truth:truth:'+TRUTH_VERSION
  //  testImplementation 'com.google.truth.extensions:truth-java8-extension:'+TRUTH_VERSION   
}

mainClassName = 'Main'

version = '1.08'
sourceCompatibility = JavaVersion.VERSION_1_8 
targetCompatibility = JavaVersion.VERSION_1_8

ext.appdir = file(/D:\Core Files\Adobe\ProgrammingComputer Books\non-book materials\Booklist app\booksearch\app/)


task deleteJars {
  doLast {
     file(appdir).listFiles().each({
       if(it.name.endsWith('.jar'))
         it.delete();
     });
  }
}


task install(type: Copy, dependsOn:[installDist, deleteJars]) {
  def libdir = file(new File(installDist.destinationDir, 'lib')) 
  from libdir
  into appdir
  
  doLast {
     new File(appdir, 'run.cmd').text = """
  @echo off
  setlocal
  
  ${versionText()}
  
  java %JAVA_OPTS% -cp \"%~dp0${String.join(';%~dp0', libdir.list())}\" ${mainClassName} %*
  
  """.stripIndent()
  } 
}

def versionText() {
  if(!version && version == 'unspecified') return '';
  String s = "echo version: %APP_VERSION% (${java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofLocalizedDateTime(java.time.format.FormatStyle.MEDIUM))}^)"
  return """
  SET APP_VERSION=${version}
  if [%1]==[-v] (
    ${s}
    goto:eof
  )
  if [%1]==[--version] (
    ${s}
    goto:eof
  )
  """;    
}


run {
  environment['BOOKLIST_ROOT'] = /D:\Core Files\Adobe\ProgrammingComputer Books/
  workingDir appdir.parent  
}


jar {
  exclude 'fxml/*.fxgraph'
}
run {
  workingDir appdir.parent
}

defaultTasks 'install'

test {
  useJUnitPlatform()
  systemProperty 'java.util.logging.config.file','test-logging.properties'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco.html")
    }
}




